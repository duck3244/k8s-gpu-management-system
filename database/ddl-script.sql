-- ============================================================================
-- K8s GPU Management System DDL Script
-- Oracle Database 12c+
-- ============================================================================

-- 기존 테이블 삭제 (순서 중요 - 외래키 관계 고려)
DROP TABLE GPU_USAGE_METRICS CASCADE CONSTRAINTS;
DROP TABLE GPU_ALLOCATIONS CASCADE CONSTRAINTS;
DROP TABLE SYSTEM_ALERTS CASCADE CONSTRAINTS;
DROP TABLE ALERT_RULES CASCADE CONSTRAINTS;
DROP TABLE GPU_BENCHMARKS CASCADE CONSTRAINTS;
DROP TABLE GPU_COMPATIBILITY CASCADE CONSTRAINTS;
DROP TABLE WORKLOAD_PROFILES CASCADE CONSTRAINTS;
DROP TABLE MIG_INSTANCES CASCADE CONSTRAINTS;
DROP TABLE MIG_PROFILES CASCADE CONSTRAINTS;
DROP TABLE GPU_DEVICES CASCADE CONSTRAINTS;
DROP TABLE GPU_NODES CASCADE CONSTRAINTS;
DROP TABLE GPU_MODELS CASCADE CONSTRAINTS;

-- Spring Batch 테이블 삭제
DROP TABLE BATCH_STEP_EXECUTION_CONTEXT CASCADE CONSTRAINTS;
DROP TABLE BATCH_JOB_EXECUTION_CONTEXT CASCADE CONSTRAINTS;
DROP TABLE BATCH_STEP_EXECUTION CASCADE CONSTRAINTS;
DROP TABLE BATCH_JOB_EXECUTION_PARAMS CASCADE CONSTRAINTS;
DROP TABLE BATCH_JOB_EXECUTION CASCADE CONSTRAINTS;
DROP TABLE BATCH_JOB_INSTANCE CASCADE CONSTRAINTS;

-- 시퀀스 삭제
DROP SEQUENCE BATCH_STEP_EXECUTION_SEQ;
DROP SEQUENCE BATCH_JOB_EXECUTION_SEQ;
DROP SEQUENCE BATCH_JOB_SEQ;

-- ============================================================================
-- 1. GPU 모델 테이블
-- ============================================================================
CREATE TABLE GPU_MODELS (
    MODEL_ID VARCHAR2(20) PRIMARY KEY,
    MODEL_NAME VARCHAR2(50) NOT NULL,
    MANUFACTURER VARCHAR2(20) DEFAULT 'NVIDIA' NOT NULL,
    ARCHITECTURE VARCHAR2(30) NOT NULL,
    MEMORY_GB NUMBER(3) NOT NULL,
    CUDA_CORES NUMBER(6),
    TENSOR_CORES NUMBER(4),
    RT_CORES NUMBER(4) DEFAULT 0,
    BASE_CLOCK_MHZ NUMBER(5),
    BOOST_CLOCK_MHZ NUMBER(5),
    MEMORY_BANDWIDTH_GBPS NUMBER(6,1),
    MEMORY_TYPE VARCHAR2(20),
    POWER_CONSUMPTION_W NUMBER(4) NOT NULL,
    PCIE_GENERATION VARCHAR2(10),
    MIG_SUPPORT CHAR(1) DEFAULT 'N' CHECK (MIG_SUPPORT IN ('Y', 'N')),
    MAX_MIG_INSTANCES NUMBER(2) DEFAULT 0,
    COMPUTE_CAPABILITY VARCHAR2(10),
    RELEASE_YEAR NUMBER(4),
    MARKET_SEGMENT VARCHAR2(20) CHECK (MARKET_SEGMENT IN ('Gaming', 'Professional', 'Datacenter')),
    END_OF_LIFE_DATE DATE,
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- ============================================================================
-- 2. GPU 노드 테이블
-- ============================================================================
CREATE TABLE GPU_NODES (
    NODE_ID VARCHAR2(50) PRIMARY KEY,
    NODE_NAME VARCHAR2(100) NOT NULL UNIQUE,
    CLUSTER_NAME VARCHAR2(50),
    NODE_IP VARCHAR2(15),
    TOTAL_GPUS NUMBER(3) DEFAULT 0,
    AVAILABLE_GPUS NUMBER(3) DEFAULT 0,
    NODE_STATUS VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (NODE_STATUS IN ('ACTIVE', 'INACTIVE', 'MAINTENANCE', 'FAILED')),
    KUBERNETES_VERSION VARCHAR2(20),
    DOCKER_VERSION VARCHAR2(20),
    NVIDIA_DRIVER_VERSION VARCHAR2(20),
    NODE_LABELS CLOB,
    TAINTS CLOB,
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- ============================================================================
-- 3. GPU 장비 테이블
-- ============================================================================
CREATE TABLE GPU_DEVICES (
    DEVICE_ID VARCHAR2(50) PRIMARY KEY,
    NODE_ID VARCHAR2(50) NOT NULL,
    MODEL_ID VARCHAR2(20) NOT NULL,
    DEVICE_INDEX NUMBER(2) NOT NULL,
    SERIAL_NUMBER VARCHAR2(50),
    PCI_ADDRESS VARCHAR2(20) NOT NULL,
    GPU_UUID VARCHAR2(100) NOT NULL UNIQUE,
    DEVICE_STATUS VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (DEVICE_STATUS IN ('ACTIVE', 'INACTIVE', 'MAINTENANCE', 'FAILED', 'MIG_ENABLED')),
    CURRENT_TEMP_C NUMBER(5,2),
    MAX_TEMP_C NUMBER(5,2) DEFAULT 83,
    CURRENT_POWER_W NUMBER(6,2),
    MAX_POWER_W NUMBER(6,2),
    DRIVER_VERSION VARCHAR2(20),
    FIRMWARE_VERSION VARCHAR2(20),
    VBIOS_VERSION VARCHAR2(20),
    INSTALLATION_DATE DATE,
    LAST_MAINTENANCE_DATE DATE,
    WARRANTY_EXPIRY_DATE DATE,
    PURCHASE_COST NUMBER(10,2),
    DEPRECIATION_MONTHS NUMBER(3) DEFAULT 36,
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    
    CONSTRAINT FK_GPU_DEVICES_NODE FOREIGN KEY (NODE_ID) REFERENCES GPU_NODES(NODE_ID),
    CONSTRAINT FK_GPU_DEVICES_MODEL FOREIGN KEY (MODEL_ID) REFERENCES GPU_MODELS(MODEL_ID)
);

-- ============================================================================
-- 4. MIG 프로파일 테이블
-- ============================================================================
CREATE TABLE MIG_PROFILES (
    PROFILE_ID VARCHAR2(20) PRIMARY KEY,
    MODEL_ID VARCHAR2(20) NOT NULL,
    PROFILE_NAME VARCHAR2(50) NOT NULL,
    COMPUTE_SLICES NUMBER(2) NOT NULL,
    MEMORY_SLICES NUMBER(2) NOT NULL,
    MEMORY_GB NUMBER(3) NOT NULL,
    MAX_INSTANCES_PER_GPU NUMBER(2) NOT NULL,
    PERFORMANCE_RATIO NUMBER(4,2),
    USE_CASE VARCHAR2(100),
    DESCRIPTION VARCHAR2(200),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    
    CONSTRAINT FK_MIG_PROFILES_MODEL FOREIGN KEY (MODEL_ID) REFERENCES GPU_MODELS(MODEL_ID)
);

-- ============================================================================
-- 5. MIG 인스턴스 테이블
-- ============================================================================
CREATE TABLE MIG_INSTANCES (
    MIG_ID VARCHAR2(50) PRIMARY KEY,
    DEVICE_ID VARCHAR2(50) NOT NULL,
    PROFILE_ID VARCHAR2(20) NOT NULL,
    INSTANCE_ID NUMBER(2) NOT NULL,
    MIG_UUID VARCHAR2(100) NOT NULL UNIQUE,
    ALLOCATED CHAR(1) DEFAULT 'N' CHECK (ALLOCATED IN ('Y', 'N')),
    INSTANCE_STATUS VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (INSTANCE_STATUS IN ('ACTIVE', 'INACTIVE', 'FAILED')),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    ALLOCATED_DATE DATE,
    LAST_USED_DATE DATE,
    
    CONSTRAINT FK_MIG_INSTANCES_DEVICE FOREIGN KEY (DEVICE_ID) REFERENCES GPU_DEVICES(DEVICE_ID),
    CONSTRAINT FK_MIG_INSTANCES_PROFILE FOREIGN KEY (PROFILE_ID) REFERENCES MIG_PROFILES(PROFILE_ID),
    CONSTRAINT UK_MIG_INSTANCE UNIQUE (DEVICE_ID, INSTANCE_ID)
);

-- ============================================================================
-- 6. GPU 할당 테이블
-- ============================================================================
CREATE TABLE GPU_ALLOCATIONS (
    ALLOCATION_ID VARCHAR2(50) PRIMARY KEY,
    NAMESPACE VARCHAR2(50) NOT NULL,
    POD_NAME VARCHAR2(100) NOT NULL,
    CONTAINER_NAME VARCHAR2(100),
    WORKLOAD_TYPE VARCHAR2(30),
    RESOURCE_TYPE VARCHAR2(20) NOT NULL CHECK (RESOURCE_TYPE IN ('FULL_GPU', 'MIG_INSTANCE', 'SHARED_GPU')),
    ALLOCATED_RESOURCE VARCHAR2(50) NOT NULL,
    REQUESTED_MEMORY_GB NUMBER(3),
    ALLOCATED_MEMORY_GB NUMBER(3),
    PRIORITY_CLASS VARCHAR2(20) DEFAULT 'normal',
    ALLOCATION_TIME DATE DEFAULT SYSDATE,
    PLANNED_RELEASE_TIME DATE,
    RELEASE_TIME DATE,
    STATUS VARCHAR2(20) DEFAULT 'ALLOCATED' CHECK (STATUS IN ('PENDING', 'ALLOCATED', 'RELEASED', 'FAILED', 'EXPIRED')),
    COST_PER_HOUR NUMBER(8,4),
    TOTAL_COST NUMBER(10,2),
    USER_ID VARCHAR2(50),
    TEAM_ID VARCHAR2(50),
    PROJECT_ID VARCHAR2(50),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- ============================================================================
-- 7. GPU 사용량 메트릭 테이블
-- ============================================================================
CREATE TABLE GPU_USAGE_METRICS (
    METRIC_ID VARCHAR2(50) PRIMARY KEY,
    DEVICE_ID VARCHAR2(50),
    MIG_ID VARCHAR2(50),
    ALLOCATION_ID VARCHAR2(50),
    GPU_UTILIZATION_PCT NUMBER(5,2),
    MEMORY_USED_MB NUMBER(8),
    MEMORY_TOTAL_MB NUMBER(8),
    MEMORY_UTILIZATION_PCT NUMBER(5,2),
    TEMPERATURE_C NUMBER(5,2),
    POWER_DRAW_W NUMBER(6,2),
    FAN_SPEED_PCT NUMBER(5,2),
    CLOCK_GRAPHICS_MHZ NUMBER(5),
    CLOCK_MEMORY_MHZ NUMBER(5),
    PCIE_TX_MBPS NUMBER(8,2),
    PCIE_RX_MBPS NUMBER(8,2),
    PROCESSES_COUNT NUMBER(3),
    TIMESTAMP DATE DEFAULT SYSDATE NOT NULL,
    COLLECTION_SOURCE VARCHAR2(20),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    
    CONSTRAINT FK_METRICS_DEVICE FOREIGN KEY (DEVICE_ID) REFERENCES GPU_DEVICES(DEVICE_ID),
    CONSTRAINT FK_METRICS_MIG FOREIGN KEY (MIG_ID) REFERENCES MIG_INSTANCES(MIG_ID),
    CONSTRAINT FK_METRICS_ALLOCATION FOREIGN KEY (ALLOCATION_ID) REFERENCES GPU_ALLOCATIONS(ALLOCATION_ID)
);

-- ============================================================================
-- 8. 알림 규칙 테이블
-- ============================================================================
CREATE TABLE ALERT_RULES (
    RULE_ID VARCHAR2(50) PRIMARY KEY,
    RULE_NAME VARCHAR2(100) NOT NULL,
    RULE_TYPE VARCHAR2(30) NOT NULL,
    TARGET_TYPE VARCHAR2(20) NOT NULL,
    TARGET_FILTER VARCHAR2(200),
    THRESHOLD_VALUE NUMBER(10,2) NOT NULL,
    THRESHOLD_OPERATOR VARCHAR2(10) NOT NULL CHECK (THRESHOLD_OPERATOR IN ('>', '>=', '<', '<=', '=', '!=')),
    SEVERITY VARCHAR2(10) NOT NULL CHECK (SEVERITY IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),
    EVALUATION_INTERVAL_MINUTES NUMBER(4) DEFAULT 5,
    NOTIFICATION_CHANNELS VARCHAR2(200),
    ENABLED CHAR(1) DEFAULT 'Y' CHECK (ENABLED IN ('Y', 'N')),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- ============================================================================
-- 9. 시스템 알림 테이블
-- ============================================================================
CREATE TABLE SYSTEM_ALERTS (
    ALERT_ID VARCHAR2(50) PRIMARY KEY,
    RULE_ID VARCHAR2(50),
    ALERT_TYPE VARCHAR2(30) NOT NULL,
    SEVERITY VARCHAR2(10) NOT NULL CHECK (SEVERITY IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),
    TARGET_TYPE VARCHAR2(20),
    TARGET_ID VARCHAR2(50),
    MESSAGE VARCHAR2(500) NOT NULL,
    DETAILS CLOB,
    METRIC_VALUE NUMBER(10,2),
    THRESHOLD_VALUE NUMBER(10,2),
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (STATUS IN ('ACTIVE', 'ACKNOWLEDGED', 'RESOLVED', 'SUPPRESSED')),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    ACKNOWLEDGED_DATE DATE,
    ACKNOWLEDGED_BY VARCHAR2(50),
    RESOLVED_DATE DATE,
    RESOLVED_BY VARCHAR2(50),
    
    CONSTRAINT FK_ALERTS_RULE FOREIGN KEY (RULE_ID) REFERENCES ALERT_RULES(RULE_ID)
);

-- ============================================================================
-- 10. GPU 호환성 테이블
-- ============================================================================
CREATE TABLE GPU_COMPATIBILITY (
    COMPAT_ID VARCHAR2(50) PRIMARY KEY,
    MODEL_ID VARCHAR2(20) NOT NULL,
    CUDA_VERSION VARCHAR2(10),
    DRIVER_MIN_VERSION VARCHAR2(20),
    DRIVER_MAX_VERSION VARCHAR2(20),
    KUBERNETES_VERSION VARCHAR2(20),
    CONTAINER_RUNTIME VARCHAR2(20),
    OS_TYPE VARCHAR2(20),
    OS_VERSION VARCHAR2(50),
    SUPPORTED CHAR(1) DEFAULT 'Y' CHECK (SUPPORTED IN ('Y', 'N')),
    PERFORMANCE_IMPACT_PCT NUMBER(5,2),
    KNOWN_ISSUES CLOB,
    WORKAROUNDS CLOB,
    TESTED_DATE DATE,
    NOTES VARCHAR2(500),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    
    CONSTRAINT FK_COMPATIBILITY_MODEL FOREIGN KEY (MODEL_ID) REFERENCES GPU_MODELS(MODEL_ID)
);

-- ============================================================================
-- 11. GPU 벤치마크 테이블
-- ============================================================================
CREATE TABLE GPU_BENCHMARKS (
    BENCHMARK_ID VARCHAR2(50) PRIMARY KEY,
    MODEL_ID VARCHAR2(20) NOT NULL,
    BENCHMARK_TYPE VARCHAR2(30) NOT NULL,
    BENCHMARK_NAME VARCHAR2(50) NOT NULL,
    SCORE NUMBER(12,2) NOT NULL,
    SCORE_UNIT VARCHAR2(20),
    BATCH_SIZE NUMBER(4),
    PRECISION VARCHAR2(10),
    FRAMEWORK VARCHAR2(20),
    TEST_DURATION_MINUTES NUMBER(6,2),
    TEST_DATE DATE NOT NULL,
    TEST_ENVIRONMENT VARCHAR2(200),
    HARDWARE_CONFIG CLOB,
    SOFTWARE_CONFIG CLOB,
    NOTES VARCHAR2(500),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    
    CONSTRAINT FK_BENCHMARKS_MODEL FOREIGN KEY (MODEL_ID) REFERENCES GPU_MODELS(MODEL_ID)
);

-- ============================================================================
-- 12. 워크로드 프로파일 테이블
-- ============================================================================
CREATE TABLE WORKLOAD_PROFILES (
    PROFILE_ID VARCHAR2(50) PRIMARY KEY,
    WORKLOAD_NAME VARCHAR2(100) NOT NULL,
    WORKLOAD_TYPE VARCHAR2(30) NOT NULL,
    MIN_MEMORY_GB NUMBER(3),
    PREFERRED_MEMORY_GB NUMBER(3),
    MIN_COMPUTE_CAPABILITY VARCHAR2(10),
    PREFERRED_ARCHITECTURES VARCHAR2(200),
    REQUIRES_MIG CHAR(1) DEFAULT 'N' CHECK (REQUIRES_MIG IN ('Y', 'N')),
    MAX_SHARING_RATIO NUMBER(2),
    PERFORMANCE_REQUIREMENTS CLOB,
    RESOURCE_CONSTRAINTS CLOB,
    COST_SENSITIVITY VARCHAR2(10),
    SLA_REQUIREMENTS CLOB,
    DESCRIPTION VARCHAR2(500),
    CREATED_BY VARCHAR2(50),
    CREATED_DATE DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE DATE DEFAULT SYSDATE NOT NULL
);

-- ============================================================================
-- Spring Batch 테이블 생성
-- ============================================================================

-- Batch Job Instance
CREATE TABLE BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID NUMBER(19) NOT NULL PRIMARY KEY,
    VERSION NUMBER(19),
    JOB_NAME VARCHAR2(100) NOT NULL,
    JOB_KEY VARCHAR2(32) NOT NULL,
    CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

-- Batch Job Execution
CREATE TABLE BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID NUMBER(19) NOT NULL PRIMARY KEY,
    VERSION NUMBER(19),
    JOB_INSTANCE_ID NUMBER(19) NOT NULL,
    CREATE_TIME DATE NOT NULL,
    START_TIME DATE DEFAULT NULL,
    END_TIME DATE DEFAULT NULL,
    STATUS VARCHAR2(10),
    EXIT_CODE VARCHAR2(2500),
    EXIT_MESSAGE VARCHAR2(2500),
    LAST_UPDATED DATE,
    JOB_CONFIGURATION_LOCATION VARCHAR2(2500) NULL,
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID) REFERENCES BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

-- Batch Job Execution Params
CREATE TABLE BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID NUMBER(19) NOT NULL,
    TYPE_CD VARCHAR2(6) NOT NULL,
    KEY_NAME VARCHAR2(100) NOT NULL,
    STRING_VAL VARCHAR2(250),
    DATE_VAL DATE DEFAULT NULL,
    LONG_VAL NUMBER(19),
    DOUBLE_VAL NUMBER,
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- Batch Step Execution
CREATE TABLE BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID NUMBER(19) NOT NULL PRIMARY KEY,
    VERSION NUMBER(19) NOT NULL,
    STEP_NAME VARCHAR2(100) NOT NULL,
    JOB_EXECUTION_ID NUMBER(19) NOT NULL,
    START_TIME DATE NOT NULL,
    END_TIME DATE DEFAULT NULL,
    STATUS VARCHAR2(10),
    COMMIT_COUNT NUMBER(19),
    READ_COUNT NUMBER(19),
    FILTER_COUNT NUMBER(19),
    WRITE_COUNT NUMBER(19),
    READ_SKIP_COUNT NUMBER(19),
    WRITE_SKIP_COUNT NUMBER(19),
    PROCESS_SKIP_COUNT NUMBER(19),
    ROLLBACK_COUNT NUMBER(19),
    EXIT_CODE VARCHAR2(2500),
    EXIT_MESSAGE VARCHAR2(2500),
    LAST_UPDATED DATE,
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- Batch Job Execution Context
CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID NUMBER(19) NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR2(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

-- Batch Step Execution Context
CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID NUMBER(19) NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR2(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID) REFERENCES BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

-- ============================================================================
-- 시퀀스 생성
-- ============================================================================
CREATE SEQUENCE BATCH_STEP_EXECUTION_SEQ START WITH 0 MINVALUE 0 MAXVALUE 9223372036854775807 NOCYCLE;
CREATE SEQUENCE BATCH_JOB_EXECUTION_SEQ START WITH 0 MINVALUE 0 MAXVALUE 9223372036854775807 NOCYCLE;
CREATE SEQUENCE BATCH_JOB_SEQ START WITH 0 MINVALUE 0 MAXVALUE 9223372036854775807 NOCYCLE;

-- ============================================================================
-- 인덱스 생성
-- ============================================================================

-- GPU_NODES 인덱스
CREATE INDEX IDX_GPU_NODES_CLUSTER ON GPU_NODES(CLUSTER_NAME);
CREATE INDEX IDX_GPU_NODES_STATUS ON GPU_NODES(NODE_STATUS);
CREATE INDEX IDX_GPU_NODES_UPDATED ON GPU_NODES(UPDATED_DATE);

-- GPU_DEVICES 인덱스
CREATE INDEX IDX_GPU_DEVICES_NODE ON GPU_DEVICES(NODE_ID);
CREATE INDEX IDX_GPU_DEVICES_MODEL ON GPU_DEVICES(MODEL_ID);
CREATE INDEX IDX_GPU_DEVICES_STATUS ON GPU_DEVICES(DEVICE_STATUS);

-- GPU_USAGE_METRICS 인덱스
CREATE INDEX IDX_METRICS_DEVICE ON GPU_USAGE_METRICS(DEVICE_ID);
CREATE INDEX IDX_METRICS_TIMESTAMP ON GPU_USAGE_METRICS(TIMESTAMP);
CREATE INDEX IDX_METRICS_DEVICE_TIME ON GPU_USAGE_METRICS(DEVICE_ID, TIMESTAMP);

-- GPU_ALLOCATIONS 인덱스
CREATE INDEX IDX_ALLOCATIONS_NAMESPACE ON GPU_ALLOCATIONS(NAMESPACE);
CREATE INDEX IDX_ALLOCATIONS_STATUS ON GPU_ALLOCATIONS(STATUS);
CREATE INDEX IDX_ALLOCATIONS_TIME ON GPU_ALLOCATIONS(ALLOCATION_TIME);

-- SYSTEM_ALERTS 인덱스
CREATE INDEX IDX_ALERTS_STATUS ON SYSTEM_ALERTS(STATUS);
CREATE INDEX IDX_ALERTS_SEVERITY ON SYSTEM_ALERTS(SEVERITY);
CREATE INDEX IDX_ALERTS_CREATED ON SYSTEM_ALERTS(CREATED_DATE);

-- ============================================================================
-- 트리거 생성 (UPDATED_DATE 자동 업데이트)
-- ============================================================================

-- GPU_MODELS 트리거
CREATE OR REPLACE TRIGGER TRG_GPU_MODELS_UPDATED
    BEFORE UPDATE ON GPU_MODELS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_DATE := SYSDATE;
END;
/

-- GPU_NODES 트리거
CREATE OR REPLACE TRIGGER TRG_GPU_NODES_UPDATED
    BEFORE UPDATE ON GPU_NODES
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_DATE := SYSDATE;
END;
/

-- GPU_DEVICES 트리거
CREATE OR REPLACE TRIGGER TRG_GPU_DEVICES_UPDATED
    BEFORE UPDATE ON GPU_DEVICES
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_DATE := SYSDATE;
END;
/

-- GPU_ALLOCATIONS 트리거
CREATE OR REPLACE TRIGGER TRG_GPU_ALLOCATIONS_UPDATED
    BEFORE UPDATE ON GPU_ALLOCATIONS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_DATE := SYSDATE;
END;
/

-- GPU_USAGE_METRICS 트리거
CREATE OR REPLACE TRIGGER TRG_GPU_METRICS_UPDATED
    BEFORE UPDATE ON GPU_USAGE_METRICS
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_DATE := SYSDATE;
END;
/

-- ALERT_RULES 트리거
CREATE OR REPLACE TRIGGER TRG_ALERT_RULES_UPDATED
    BEFORE UPDATE ON ALERT_RULES
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_DATE := SYSDATE;
END;
/

-- WORKLOAD_PROFILES 트리거
CREATE OR REPLACE TRIGGER TRG_WORKLOAD_PROFILES_UPDATED
    BEFORE UPDATE ON WORKLOAD_PROFILES
    FOR EACH ROW
BEGIN
    :NEW.UPDATED_DATE := SYSDATE;
END;
/

-- ============================================================================
-- 기본 제약조건 확인
-- ============================================================================

-- 테이블 생성 완료 메시지
SELECT 'DDL 스크립트 실행 완료 - ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') AS MESSAGE FROM DUAL;

-- 생성된 테이블 목록 확인
SELECT TABLE_NAME, NUM_ROWS, LAST_ANALYZED 
FROM USER_TABLES 
WHERE TABLE_NAME LIKE '%GPU%' OR TABLE_NAME LIKE '%MIG%' OR TABLE_NAME LIKE '%BATCH%' OR TABLE_NAME LIKE '%ALERT%'
ORDER BY TABLE_NAME;